常用的连接代码：

command：
roscore

command：
ssh ubuntu@192.168.0.113
输入密码：
turtlebot

在ubuntu下运行command语句：
​roslaunch turtlebot3_bringup turtlebot3_robot.launch

运行地图command：
roslaunch turtlebot3_navigation turtlebot3_navigation.launch map_file:=$HOME/map.yaml​

----------blog​

​简易地图 map.yaml map.pgm 保存在：
/home/issuser

-----

画地图：
​export TURTLEBOT3_MODeL=burger
roslaunch turtlebot3_slam turtlebot3_slam.launch slam_methods:=gmapping

使用键盘控制tutlebot移动
roslaunch turtlebot3_teleop turtlebot3_teleop_key.alunch

保存地图为map_room
rosrun map_server map_saver -f ~/map

查看当前坐标：
rostopic echo /odom



连接好小车之后
对的，如果你是在 **远程控制** 或 **无线网络** 上控制 **TurtleBot**，那么你确实需要使用 SSH 来连接到机器人的 **Ubuntu 系统**。

### 什么时候需要 SSH

如果你的 **TurtleBot** 是在独立的硬件上运行的，并且你在 **主机电脑** 上操作 ROS 系统，那么你需要通过 **SSH** 连接到机器人，并在远程机器人上运行相关命令。通常，TurtleBot 是在其自身的计算机上运行 ROS，与你的主机电脑进行通信。

### 如何使用 SSH 连接到 TurtleBot

假设你的 **TurtleBot** 上运行的是 Ubuntu 系统，且你的主机电脑也连接到了相同的局域网，你可以通过以下步骤来进行 SSH 连接：

1. **获取 TurtleBot 的 IP 地址**
   - 在 **TurtleBot** 上打开一个终端，运行以下命令来查看 IP 地址：

   ```bash
   ifconfig
   ```

   你需要找到 **eth0** 或 **wlan0** 接口的 IP 地址，它通常是类似 `192.168.0.113` 这样的地址。

2. **从主机电脑连接到 TurtleBot**
   - 在你的主机电脑上，打开一个终端并运行以下命令：

   ```bash
   ssh ubuntu@192.168.0.113
   ```

   这里 `ubuntu` 是默认的用户名，`192.168.0.113` 是你从上一步获取的 TurtleBot 的 IP 地址。

3. **输入密码**
   - 默认情况下，TurtleBot 上的 Ubuntu 系统可能会要求你输入密码。输入密码后，你将登录到 TurtleBot 上的命令行界面。

### 完整的操作步骤

假设你已经使用 SSH 登录到 TurtleBot 上，你可以按照以下顺序进行操作：

1. **连接到 TurtleBot**
   ```bash
   ssh ubuntu@192.168.0.113
   ```

2. **启动 TurtleBot 硬件节点**（如果尚未启动）：
   ```bash
   roslaunch turtlebot_bringup minimal.launch
   ```

3. **启动 AMCL 定位系统**：
   ```bash
   roslaunch turtlebot_navigation amcl_demo.launch
   ```

4. **启动 move_base 路径规划节点**：
   ```bash
   roslaunch turtlebot_navigation move_base.launch
   ```

5. **启动 Rviz 可视化工具**：
   你也可以在本地主机上启动 Rviz，只需确保主机与 TurtleBot 在同一网络下：

   ```bash
   roslaunch turtlebot_rviz_launchers view_navigation.launch
   ```

6. **编写并启动自动移动脚本**：
   你可以将 `move_to_goal.py` 脚本上传到你的 ROS 包，并通过 SSH 远程运行。

### 注意事项

- **环境变量设置**：确保你已经设置了 `ROS_MASTER_URI` 和 `ROS_HOSTNAME`，以便主机和 TurtleBot 之间能够正确通信。如果你在远程操作，可能需要手动配置这些环境变量。
  
  在 **TurtleBot** 上（通过 SSH 登录），你需要设置 `ROS_MASTER_URI` 指向主机：

  ```bash
  export ROS_MASTER_URI=http://<主机_IP>:11311
  export ROS_HOSTNAME=<TurtleBot_IP>
  ```

  在 **主机电脑** 上，你需要设置 `ROS_MASTER_URI` 指向 TurtleBot：

  ```bash
  export ROS_MASTER_URI=http://<TurtleBot_IP>:11311
  export ROS_HOSTNAME=<主机_IP>
  ```

- **网络连接**：确保主机和 TurtleBot 在同一个局域网内，才能保证他们之间的通信没有问题。

### 总结

如果你通过 SSH 控制 TurtleBot，那么在执行 ROS 相关操作之前，确实需要首先用 SSH 登录到 TurtleBot。之后，你可以按照正常步骤启动所需的 ROS 节点，并控制 TurtleBot 自动移动。




如果要变成launch文件
当然！下面是一个完整的步骤指南，教你如何使用 **TurtleBot** 从位置 A 移动到位置 B，自动导航。我们将一步一步地进行，包括配置 ROS 和 TurtleBot 的设置、启动必要的节点、编写 `launch` 文件以及执行自动移动脚本。

### 完整步骤

#### 1. 启动 `roscore`
首先，启动 ROS 核心服务，这是所有 ROS 节点和通信的基础。你需要在一个终端中运行：

```bash
roscore
```

这将启动 ROS 核心服务，等待其他节点的连接。

#### 2. 启动 TurtleBot 相关节点
在启动 `roscore` 后，打开另一个终端，启动 **TurtleBot** 相关的硬件和传感器节点。

如果你使用的是 TurtleBot 2，运行：

```bash
roslaunch turtlebot_bringup minimal.launch
```

如果是 **TurtleBot 3**，使用：

```bash
roslaunch turtlebot3_bringup turtlebot3_robot.launch
```

这将启动 TurtleBot 所需的传感器、驱动程序和硬件接口节点。

#### 3. 启动 **AMCL** 定位系统
接下来，你需要启动 **AMCL**（Adaptive Monte Carlo Localization）定位系统，这是 TurtleBot 用来定位自身的系统。你可以通过以下命令启动：

```bash
roslaunch turtlebot_navigation amcl_demo.launch
```

这将启动 **AMCL**，同时需要一个地图文件。如果你已经有一个地图文件，可以通过 `map_file` 参数指定路径。如果没有地图文件，后续的自动导航将无法正确进行。

#### 4. 启动 `move_base` 路径规划节点
在 **move_base** 节点启动之前，你已经启动了定位系统。在另一个终端中，启动 `move_base`，它负责路径规划和控制机器人朝目标移动：

```bash
roslaunch turtlebot_navigation move_base.launch
```

这将启动 **move_base**，并且确保机器人能够根据地图规划路径。

#### 5. 启动 **Rviz** 可视化工具
**Rviz** 是 ROS 的可视化工具，可以帮助你查看机器人在地图上的位置，设定目标等。运行以下命令启动 **Rviz**：

```bash
roslaunch turtlebot_rviz_launchers view_navigation.launch
```

此时，你应该会看到 **Rviz** 界面，在界面中显示了地图、机器人位置以及其他传感器信息。你可以在 **Rviz** 中通过点击“2D Nav Goal”按钮来设置目标位置。

#### 6. 编写并启动自动移动脚本
为了让机器人自动从一个点移动到另一个点，你需要编写一个 Python 脚本，控制机器人执行移动任务。以下是 `move_to_goal.py` 脚本的代码：

```python
#!/usr/bin/env python
import rospy
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
import actionlib

def move_to_goal(x, y, frame_id="map"):
    # 初始化ROS节点
    rospy.init_node('move_to_goal', anonymous=True)
    
    # 创建一个action客户端
    client = actionlib.SimpleActionClient('move_base', MoveBaseAction)
    
    # 等待move_base服务器连接
    rospy.loginfo("Waiting for move_base action server...")
    client.wait_for_server()
    rospy.loginfo("Connected to move_base action server")
    
    # 设置目标位置
    goal = MoveBaseGoal()
    goal.target_pose.header.frame_id = frame_id
    goal.target_pose.header.stamp = rospy.Time.now()

    # 设置目标位置的坐标
    goal.target_pose.pose.position.x = x
    goal.target_pose.pose.position.y = y
    goal.target_pose.pose.orientation.w = 1.0  # 定义方向（这里是正方向）

    # 发送目标并等待结果
    rospy.loginfo("Sending goal")
    client.send_goal(goal)
    client.wait_for_result()

    if client.get_state() == actionlib.GoalStatus.SUCCEEDED:
        rospy.loginfo("The robot reached the goal!")
    else:
        rospy.loginfo("The robot failed to reach the goal.")

if __name__ == '__main__':
    try:
        # 目标位置可以从 launch 文件传入，或者在脚本中直接定义
        move_to_goal(2.0, 2.0)  # 将机器人移动到 (2.0, 2.0) 坐标
    except rospy.ROSInterruptException:
        rospy.loginfo("Navigation test finished.")
```

将上面的代码保存为 `move_to_goal.py` 文件，并确保它可以在你的 ROS 包中运行。

#### 7. 创建 `launch` 文件
为了简化操作，你可以将所有的启动操作集成到一个 `launch` 文件中。创建一个 `move_to_goal.launch` 文件，包含启动所有节点的配置：

```xml
<launch>
    <!-- 启动TurtleBot硬件节点 -->
    <include file="$(find turtlebot_bringup)/launch/minimal.launch" />
    
    <!-- 启动AMCL定位系统 -->
    <include file="$(find turtlebot_navigation)/launch/amcl_demo.launch" />
    
    <!-- 启动move_base路径规划节点 -->
    <node pkg="move_base" type="move_base" name="move_base" output="screen">
        <param name="base_local_planner" value="base_local_planner/TrajectoryPlannerROS"/>
        <param name="base_global_planner" value="navfn/NavfnROS"/>
    </node>

    <!-- 启动Rviz可视化工具 -->
    <include file="$(find turtlebot_rviz_launchers)/launch/view_navigation.launch" />

    <!-- 启动自动移动脚本 -->
    <node pkg="your_package" type="move_to_goal.py" name="move_to_goal" output="screen">
        <param name="goal_x" value="2.0"/>
        <param name="goal_y" value="2.0"/>
    </node>
</launch>
```

将这个 `launch` 文件保存到你的 ROS 包中。通过这个文件，你可以一次性启动所有相关的节点，并让机器人自动移动。

#### 8. 启动整个系统
在终端中运行 `launch` 文件，启动所有节点并执行自动移动：

```bash
roslaunch your_package move_to_goal.launch
```

这将自动启动 **TurtleBot**，定位系统，路径规划，Rviz 可视化工具以及自动移动脚本。机器人将自动移动到 `(2.0, 2.0)` 位置。

### 小结
通过上述步骤，你已经实现了 TurtleBot 自动从一个位置移动到另一个位置：

1. 启动 ROS 核心服务 (`roscore`)。
2. 启动 TurtleBot 硬件节点。
3. 启动 **AMCL** 定位系统和 **move_base** 路径规划。
4. 使用 **Rviz** 进行可视化设置。
5. 编写并运行自动移动脚本，控制机器人从一个位置自动移动到另一个位置。

希望这能帮助你顺利完成任务！如果有任何问题，随时向我提问！
